---
title: "Blog-3: Clustering-Exploring Weather Patterns through Machine Learning"
author: "Amal Sujith"
date: "2023-11-29"
categories: [code, analysis]
image: "image4.jpg"
---

**Exploring Weather Patterns through Machine Learning**

**Introduction**
```{python}
#In this blog, we'll dive into granular weather data to uncover patterns using Python and K-Means clustering. Analyzing minute-by-minute observations can reveal valuable insights into weather conditions.
```

**Exploring the Dataset**
```{python}
#Loading and Preprocessing the Data

#First, we load a dataset containing high-frequency weather data. It has measurements like temperature, humidity, wind speed, etc. taken every minute across many sensors. After sampling it down for feasibility, we do some prep like handling missing data.
```

```{python}
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
from itertools import cycle, islice
import matplotlib.pyplot as plt
from pandas.plotting import parallel_coordinates
%matplotlib inline
```
```{python}
data = pd.read_csv('minute_weather.csv')
data
data.shape
data.head()
sampled_df = data[(data['rowID'] % 10) == 0]
sampled_df.shape
sampled_df.describe().transpose()
sampled_df[sampled_df['rain_accumulation'] == 0].shape
sampled_df[sampled_df['rain_duration'] == 0].shape
del sampled_df['rain_accumulation']
del sampled_df['rain_duration']
rows_before = sampled_df.shape[0]
sampled_df = sampled_df.dropna()
rows_after = sampled_df.shape[0]
rows_before - rows_after
sampled_df.columns

```
```{python}
features = ['air_pressure', 'air_temp', 'avg_wind_direction', 'avg_wind_speed', 'max_wind_direction', 
        'max_wind_speed','relative_humidity']

select_df = sampled_df[features]
select_df.columns
select_df
X = StandardScaler().fit_transform(select_df)
X
```
**K-Means Clustering:**

```{python}
#K-Means looks for distinct clusters within the data by minimizing differences within clusters and maximizing differences between them. We have it generate 12 clusters to pull out nuanced weather patterns.
```

```{python}
kmeans = KMeans(n_clusters=12)
model = kmeans.fit(X)
print("model\n", model)
centers = model.cluster_centers_
centers
```

**Visualizing and Interpreting the Clusters**
```{python}
#To interpret the clusters, parallel coordinate plots are perfect. They allow visualizing high-dimensional data across multiple variables. We write functions to easily generate plots coloring each cluster's center values. The visualization reveals interesting insights - clusters clearly capture different weather conditions like dry days or warm fronts. We can also spot transitional patterns between weather states.
```

```{python}
def pd_centers(featuresUsed, centers):
	colNames = list(featuresUsed)
	colNames.append('prediction')

	# Zip with a column called 'prediction' (index)
	Z = [np.append(A, index) for index, A in enumerate(centers)]

	# Convert to pandas data frame for plotting
	P = pd.DataFrame(Z, columns=colNames)
	P['prediction'] = P['prediction'].astype(int)
	return P
```
```{python}
def parallel_plot(data):
	my_colors = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None, len(data)))
	plt.figure(figsize=(15,8)).gca().axes.set_ylim([-3,+3])
	parallel_coordinates(data, 'prediction', color = my_colors, marker='o')
```
```{python}
#Dry Days
P = pd_centers(features, centers)
P
parallel_plot(P[P['relative_humidity'] < -0.5])
```
```{python}
#Warm Days
parallel_plot(P[P['air_temp'] > 0.5])
```
```{python}
#Cool Days
parallel_plot(P[(P['relative_humidity'] > 0.5) & (P['air_temp'] < 0.5)])
```

**Conclusion**
```{python}
#This analysis enhances our understanding of local weather dynamics. Granular clustering uncovers patterns hidden in the raw data. As weather data grows ever more abundant, machine learning techniques will continue unlocking its valuable secrets.
```
